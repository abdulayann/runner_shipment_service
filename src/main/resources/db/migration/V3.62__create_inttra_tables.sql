-- Step 1: Create sailing_information table
CREATE TABLE IF NOT EXISTS sailing_information (
    id bigint NOT NULL GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    created_at timestamp without time zone NOT NULL,
    created_by varchar,
    guid uuid NOT NULL DEFAULT uuid_generate_v4(),
    updated_at timestamp without time zone NOT NULL,
    updated_by varchar,
    is_deleted boolean DEFAULT false,
    tenant_id integer,
    carrier_receipt_place VARCHAR(100),
    pol VARCHAR(100),
    pod VARCHAR(100),
    carrier_delivery_place VARCHAR(100),
    carrier VARCHAR(100),
    vessel_name VARCHAR(2048),
    voyage_no VARCHAR(100),
    eta timestamp without time zone,
    etd timestamp without time zone,
    earliest_departure_date timestamp without time zone,
    latest_delivery_date timestamp without time zone,
    terminal_cutoff timestamp without time zone,
    verified_gross_mass_cutoff timestamp without time zone,
    ship_instruction_cutoff timestamp without time zone,
    hazardous_booking_cutoff timestamp without time zone,
    reefer_cutoff timestamp without time zone,
    empty_cont_pickup_cutoff timestamp without time zone,
    loaded_cont_gate_in_cutoff timestamp without time zone,
    last_updated_sailing_info timestamp without time zone,
    sailing_schedule_data jsonb
);

-- Step 2: Create shipping_instruction table
CREATE TABLE IF NOT EXISTS shipping_instruction (
    id bigint NOT NULL GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    created_at timestamp without time zone NOT NULL,
    created_by varchar,
    guid uuid NOT NULL DEFAULT uuid_generate_v4(),
    updated_at timestamp without time zone NOT NULL,
    updated_by varchar,
    is_deleted boolean DEFAULT false,
    tenant_id integer,
    status VARCHAR(20),
    shipping_instruction_type varchar(50),
    service_type varchar(20),
    shipper_declared_value numeric,
    shipper_declared_value_currency varchar(20),
    bl_release_office varchar(100),
    date_of_issue timestamp without time zone,
    no_of_freight_copies integer,
    no_of_un_freight_copies integer,
    non_nego_freight_copies integer,
    non_nego_un_freight_copies integer,
    contract_id BIGINT REFERENCES parties(id),
    shipper_id BIGINT REFERENCES parties(id),
    consignee_id BIGINT REFERENCES parties(id),
    forwarding_agent_id BIGINT REFERENCES parties(id),
    carrier_bl_no VARCHAR(100),
    carrier_booking_no VARCHAR(100),
    entity_type VARCHAR(50),
    entity_id BIGINT,
    entity_number VARCHAR(100),
    bl_comments TEXT,
    sailing_information_id INTEGER
);
CREATE TABLE IF NOT EXISTS verified_gross_mass (
    id bigint NOT NULL GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    created_at timestamp without time zone NOT NULL,
    created_by varchar,
    guid uuid NOT NULL DEFAULT uuid_generate_v4(),
    updated_at timestamp without time zone NOT NULL,
    updated_by varchar,
    is_deleted boolean DEFAULT false,
    tenant_id integer,
    status VARCHAR(50),
    carrier_booking_no VARCHAR(100),
    carrier_bl_no VARCHAR(100),
    entity_type VARCHAR(50),
    entity_id BIGINT,
    entity_number VARCHAR(100),
    internal_emails TEXT,
    external_emails TEXT,
    requestor_id BIGINT REFERENCES parties(id),
    authorised_id BIGINT REFERENCES parties(id),
    responsible_id BIGINT REFERENCES parties(id),
    sailing_information_id BIGINT REFERENCES sailing_information(id)
);
-- Step 3: Create carrier_booking table
CREATE TABLE IF NOT EXISTS carrier_booking (
    id bigint NOT NULL GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    created_at timestamp without time zone NOT NULL,
    created_by varchar,
    guid uuid NOT NULL DEFAULT uuid_generate_v4(),
    updated_at timestamp without time zone NOT NULL,
    updated_by varchar,
    is_deleted boolean DEFAULT false,
    tenant_id integer,
    status VARCHAR(50),
    booking_no VARCHAR(100) UNIQUE,
    carrier_booking_no VARCHAR(100),
    carrier_bl_no VARCHAR(100),
    entity_type VARCHAR(50),
    entity_id BIGINT,
    entity_number VARCHAR(100),
    service_type VARCHAR(50),
    booking_office VARCHAR(100),
    booking_comment TEXT,
    carrier_comment TEXT,
    requester_id BIGINT REFERENCES parties(id),
    shipper_id BIGINT REFERENCES parties(id),
    consignee_id BIGINT REFERENCES parties(id),
    forwarding_agent_id BIGINT REFERENCES parties(id),
    pickup_from_id BIGINT REFERENCES parties(id),
    deliver_to_id BIGINT REFERENCES parties(id),
    contract_id BIGINT REFERENCES parties(id),
    internal_emails TEXT,
    external_emails TEXT,
    created_by_user_email TEXT,
    submit_by_user_email TEXT
    pickup_from_req_empty_positioning_date timestamp without time zone,
    pickup_from_req_full_pickup_date timestamp without time zone,
    pickup_from_contact_name varchar(255),
    pickup_from_contact_no varchar(50),
    delivery_to_req_empty_positioning_date timestamp without time zone,
    delivery_to_req_full_pickup_date timestamp without time zone,
    delivery_to_contact_name varchar(255),
    delivery_to_contact_no varchar(50),
    loaded_container_drop_off_details jsonb,
    empty_container_pickup_details jsonb,
    shipping_instruction_id BIGINT REFERENCES shipping_instruction(id),
    verified_gross_mass_id BIGINT REFERENCES verified_gross_mass(id),
    sailing_information_id BIGINT REFERENCES sailing_information(id)
);

-- Step 4: Create carrier_routings table
CREATE TABLE IF NOT EXISTS carrier_routings (
    id bigint NOT NULL GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    created_at timestamp without time zone NOT NULL,
    created_by varchar,
    guid uuid NOT NULL DEFAULT uuid_generate_v4(),
    updated_at timestamp without time zone NOT NULL,
    updated_by varchar,
    is_deleted boolean DEFAULT false,
    tenant_id integer,
    sequence INTEGER,
    transport_mode VARCHAR(50),
    carriage_type VARCHAR(50),
    pol VARCHAR(100),
    pod VARCHAR(100),
    eta timestamp without time zone,
    etd timestamp without time zone,
    vessel_name VARCHAR(2048),
    voyage_no VARCHAR(100),
    carrier_booking_id BIGINT REFERENCES carrier_booking(id)
);

-- Step 5: Create freight_details table
CREATE TABLE IF NOT EXISTS freight_details (
    id bigint NOT NULL GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    created_at timestamp without time zone NOT NULL,
    created_by varchar,
    guid uuid NOT NULL DEFAULT uuid_generate_v4(),
    updated_at timestamp without time zone NOT NULL,
    updated_by varchar,
    is_deleted boolean DEFAULT false,
    tenant_id integer,
    charge_type VARCHAR(100),
    payment_terms VARCHAR(20),
    payer_type VARCHAR(20),
    payer_location VARCHAR(100),
    shipping_instruction_id BIGINT REFERENCES shipping_instruction(id)
);

-- Step 6: Create common_packages table
CREATE TABLE IF NOT EXISTS common_packages (
    id bigint NOT NULL GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    created_at timestamp without time zone NOT NULL,
    created_by varchar,
    guid uuid NOT NULL DEFAULT uuid_generate_v4(),
    updated_at timestamp without time zone NOT NULL,
    updated_by varchar,
    is_deleted boolean DEFAULT false,
    tenant_id integer,
    container_no VARCHAR(100),
    packs INTEGER,
    packs_unit VARCHAR(50),
    hs_code VARCHAR(20),
    commodity_code VARCHAR(20),
    commodity_group VARCHAR(20),
    marksn_nums TEXT,
    goods_description TEXT,
    gross_weight NUMERIC,
    gross_weight_unit VARCHAR(20),
    volume NUMERIC,
    volume_unit VARCHAR(20),
    packing_ref_guid uuid,
    shipping_instruction_id BIGINT REFERENCES shipping_instruction(id)
);

-- Step 7: Create common_containers table
CREATE TABLE IF NOT EXISTS common_containers (
    id bigint NOT NULL GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    created_at timestamp without time zone NOT NULL,
    created_by varchar,
    guid uuid NOT NULL DEFAULT uuid_generate_v4(),
    updated_at timestamp without time zone NOT NULL,
    updated_by varchar,
    is_deleted boolean DEFAULT false,
    tenant_id integer,
    container_code VARCHAR(100),
    count BIGINT,
    goods_description TEXT,
    hs_code VARCHAR(20),
    commodity_code VARCHAR(20),
    commodity_group VARCHAR(20),
    marksn_nums TEXT,
    gross_weight NUMERIC,
    volume NUMERIC,
    net_weight NUMERIC,
    net_weight_unit VARCHAR(20),
    gross_weight_unit VARCHAR(20),
    volume_unit VARCHAR(10),
    container_no VARCHAR(100),
    packs INTEGER,
    packs_unit VARCHAR(20),
    tare_weight NUMERIC,
    tare_weight_unit VARCHAR(20),
    seal_number VARCHAR(100),
    shipper_seal_number VARCHAR(100),
    veterinary_seal_number VARCHAR(100),
    customs_seal_number VARCHAR(100),
    approval_signature VARCHAR(255),
    approval_date timestamp without time zone,
    vgm_weight numeric,
    vgm_weight_unit VARCHAR(50),
    weight_determination_method VARCHAR(100),
    weight_determination_location VARCHAR(255),
    vgm_status VARCHAR(100),
    container_ref_guid uuid,
    carrier_booking_id BIGINT REFERENCES carrier_booking(id),
    shipping_instruction_id BIGINT REFERENCES shipping_instruction(id),
    verified_gross_mass_id BIGINT REFERENCES verified_gross_mass(id),
    weighing_party_id BIGINT REFERENCES parties(id)
);

-- Step 8: Create indexes for better performance
CREATE INDEX IF NOT EXISTS idx_shipping_instruction_tenant_deleted
ON shipping_instruction (tenant_id, is_deleted);

CREATE INDEX IF NOT EXISTS idx_shipping_instruction_carrier_booking_no
ON shipping_instruction (carrier_booking_no);

CREATE INDEX IF NOT EXISTS idx_shipping_instruction_entity_type_id
ON shipping_instruction (entity_id, entity_type);

CREATE INDEX IF NOT EXISTS idx_carrier_booking_tenant_deleted
ON carrier_booking (tenant_id, is_deleted);

CREATE INDEX IF NOT EXISTS idx_carrier_booking_booking_no
ON carrier_booking (booking_no);

-- Step 9: Add columns to reference_numbers table (assumes reference_numbers exists)
ALTER TABLE reference_numbers
ADD COLUMN IF NOT EXISTS carrier_booking_id bigint,
ADD COLUMN IF NOT EXISTS shipping_instruction_id bigint,
ADD COLUMN IF NOT EXISTS verified_gross_mass_id bigint;

-- Step 10: Add foreign key constraints to reference_numbers
DO $$
BEGIN
    IF NOT EXISTS (
        SELECT 1
        FROM information_schema.table_constraints
        WHERE constraint_name = 'fk_reference_numbers_carrier_booking'
          AND table_name = 'reference_numbers'
          AND constraint_type = 'FOREIGN KEY'
    ) THEN
        ALTER TABLE reference_numbers
        ADD CONSTRAINT fk_reference_numbers_carrier_booking
        FOREIGN KEY (carrier_booking_id) REFERENCES carrier_booking(id);
    END IF;

    IF NOT EXISTS (
        SELECT 1
        FROM information_schema.table_constraints
        WHERE constraint_name = 'fk_reference_numbers_shipping_instruction'
          AND table_name = 'reference_numbers'
          AND constraint_type = 'FOREIGN KEY'
    ) THEN
        ALTER TABLE reference_numbers
        ADD CONSTRAINT fk_reference_numbers_shipping_instruction
        FOREIGN KEY (shipping_instruction_id) REFERENCES shipping_instruction(id);
    END IF;

    IF NOT EXISTS (
            SELECT 1
            FROM information_schema.table_constraints
            WHERE constraint_name = 'fk_reference_numbers_verified_gross_mass'
              AND table_name = 'reference_numbers'
              AND constraint_type = 'FOREIGN KEY'
        ) THEN
            ALTER TABLE reference_numbers
            ADD CONSTRAINT fk_reference_numbers_verified_gross_mass
            FOREIGN KEY (verified_gross_mass_id) REFERENCES verified_gross_mass(id);
    END IF;
END$$;

-- Step 11: Add transaction history table
CREATE TABLE IF NOT EXISTS transaction_history (
    id BIGINT NOT NULL GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    created_at TIMESTAMP WITHOUT TIME ZONE NOT NULL,
    created_by VARCHAR,
    updated_at TIMESTAMP WITHOUT TIME ZONE NOT NULL,
    updated_by VARCHAR,
    guid UUID NOT NULL DEFAULT uuid_generate_v4(),
    is_deleted BOOLEAN DEFAULT FALSE,
    tenant_id INTEGER,

    action_status VARCHAR,
    flow_type VARCHAR(50),                -- ENUM: INBOUND, OUTBOUND
    description TEXT,
    source_system VARCHAR(50),           -- ENUM: CARGO_RUNNER, CARRIER, INTTRA, OTHER
    actual_date_time TIMESTAMP WITHOUT TIME ZONE,
    error_message TEXT,
    entity_type VARCHAR(50),                -- ENUM: VGM, CARRIER_BOOKING, SI
    entity_id BIGINT
);

-- Index for (tenant_id, is_deleted) for soft deletes / multitenancy
CREATE INDEX IF NOT EXISTS idx_transaction_history_tenant_deleted
ON transaction_history (tenant_id, is_deleted);

-- Index for (entity_id, entity_type) to speed up lookup
CREATE INDEX IF NOT EXISTS idx_transaction_history_entity_type_id
ON transaction_history (entity_id, entity_type);
