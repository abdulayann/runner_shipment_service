trigger:
- main

pool:
  vmImage: 'ubuntu-latest'

variables:
  isMaven: 'True'
  isJava: 'True'
  jdkVersion: '1.17'
  POM_XML_PATH: 'pom.xml'
  MAVEN_OPTIONS: '-Xmx3072m'
  JAR_NAME: 'runner-shipment-services-0.0.1.jar'

steps:
  - script: |
      echo "===================================="
      echo "Backing up application config files"
      echo "===================================="
      
      # Create backup directory
      mkdir -p config_files_backup
      
      # Move application-*.properties files
      if ls src/main/resources/application-*.properties 1> /dev/null 2>&1; then
        mv src/main/resources/application-*.properties config_files_backup/
        echo "✅ Moved application-*.properties files"
      else
        echo "⚠️ No application-*.properties files found"
      fi
      
      # Move application-*.yaml files
      if ls src/main/resources/application-*.yaml 1> /dev/null 2>&1; then
        mv src/main/resources/application-*.yaml config_files_backup/
        echo "✅ Moved application-*.yaml files"
      else
        echo "⚠️ No application-*.yaml files found"
      fi
      
      # Move application-*.yml files
      if ls src/main/resources/application-*.yml 1> /dev/null 2>&1; then
        mv src/main/resources/application-*.yml config_files_backup/
        echo "✅ Moved application-*.yml files"
      else
        echo "⚠️ No application-*.yml files found"
      fi
      
      echo ""
      echo "Files moved to backup:"
      ls -la config_files_backup/ || echo "No files backed up"
      
      echo ""
      echo "Remaining files in src/main/resources/:"
      ls -la src/main/resources/
      
    displayName: 'Backup application config files'
    condition: and(eq(variables['isMaven'], 'True'), eq(variables['isJava'], 'True'))
  
  - task: Maven@3
    inputs:
      mavenPomFile: $(POM_XML_PATH)
      goals: 'clean package'
      publishJUnitResults: false
      javaHomeOption: 'JDKVersion'
      jdkVersionOption: '$(jdkVersion)'
      mavenVersionOption: 'Default'
      mavenAuthenticateFeed: true
      mavenOptions: '$(MAVEN_OPTIONS)'
      effectivePomSkip: false
      sonarQubeRunAnalysis: false
    displayName: 'Build JAR with Maven'
    condition: and(eq(variables['isMaven'], 'True'), eq(variables['isJava'], 'True'))

  - script: |
      echo "===================================="
      echo "Restoring application config files"
      echo "===================================="
      
      if [ -d "config_files_backup" ]; then
        if ls config_files_backup/* 1> /dev/null 2>&1; then
          mv config_files_backup/* src/main/resources/
          echo "✅ Config files restored to src/main/resources/"
          rm -rf config_files_backup
        else
          echo "⚠️ No files in backup to restore"
        fi
      else
        echo "⚠️ Config backup folder not found"
      fi
      
    displayName: 'Restore application config files'
    condition: and(eq(variables['isMaven'], 'True'), eq(variables['isJava'], 'True'))

  - script: |
      echo "===================================="
      echo "Checking if JAR exists:"
      echo "===================================="
      JAR_FILE="target/$(JAR_NAME)"
      
      if [ -f "$JAR_FILE" ]; then
        echo "✅ JAR file found: $JAR_FILE"
        ls -lh $JAR_FILE
      else
        echo "❌ JAR file not found: $JAR_FILE"
        echo "Available files in target:"
        ls -lh target/
        exit 1
      fi
      
      echo ""
      echo "===================================="
      echo "Checking JAR contents:"
      echo "===================================="
      
      # List all contents of the JAR
      echo "Full JAR contents:"
      jar tf $JAR_FILE
      
      echo ""
      echo "===================================="
      echo "Searching for application-*.properties and application-*.yaml files:"
      echo "===================================="
      
      # Check for application-*.properties
      if jar tf $JAR_FILE | grep -q "application-.*\.properties"; then
        echo "❌ WARNING: application-*.properties files FOUND in JAR!"
        jar tf $JAR_FILE | grep "application-.*\.properties"
      else
        echo "✅ SUCCESS: No application-*.properties files in JAR!"
      fi
      
      # Check for application-*.yaml or application-*.yml
      if jar tf $JAR_FILE | grep -q "application-.*\.ya*ml"; then
        echo "❌ WARNING: application-*.yaml/yml files FOUND in JAR!"
        jar tf $JAR_FILE | grep "application-.*\.ya*ml"
      else
        echo "✅ SUCCESS: No application-*.yaml/yml files in JAR!"
      fi
      
    displayName: 'Verify Config Files in JAR'
    condition: and(eq(variables['isMaven'], 'True'), eq(variables['isJava'], 'True'))